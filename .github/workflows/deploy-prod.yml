name: Deploy Node.js Backend

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  IMAGE_TAG: latest
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/node-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Telegram - üßæ Checkout Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="üì• *Checking out code*..." \
          -d parse_mode=Markdown

      - name: Create .env.prod file
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env

      - name: Telegram - üîê Docker Login Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="üîê *Logging into Docker Hub...*" \
          -d parse_mode=Markdown

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Telegram - üõ†Ô∏è Build Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="üõ†Ô∏è *Building Docker image* for Node.js backend..." \
          -d parse_mode=Markdown

      - name: Build Docker Image
        run: |
          docker build -f Dockerfile.prod -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Telegram - ‚úÖ Build Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="‚úÖ *Docker image built successfully.*" \
          -d parse_mode=Markdown

      - name: Telegram - üöö Pushing Image
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="üöö *Pushing image to Docker Hub...*" \
          -d parse_mode=Markdown

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Telegram - üéâ Push Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="üéâ *Image pushed successfully to Docker Hub.*" \
          -d parse_mode=Markdown

      - name: Telegram - ‚ùå Build or Push Failed
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="‚ùå *Build or push failed* for Node.js backend!" \
          -d parse_mode=Markdown

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Telegram - Deploy Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üöÄ *Deploying Node.js backend on server...*" \
            -d parse_mode=Markdown

      - name: SSH to Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST_PRODUCTION }}
          username: ${{ secrets.USERNAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT_PRODUCTION }}
          script: |
            echo "${{ secrets.ENV_PRODUCTION }}" > /home/longtr/projects/env/node.env
            cd /home/longtr/projects
            sudo docker compose pull node-backend
            sudo docker compose up -d node-backend

      - name: Telegram - Deploy Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ *Node.js backend deployed successfully!*" \
            -d parse_mode=Markdown

      - name: Telegram - Deploy Failed
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚ùå *Node.js backend deployment failed!*" \
            -d parse_mode=Markdown
